# workflow의 이름
name: Deploy to Amazon EC2 / Spring Boot with Maven

# 환경 변수 $변수명 으로 사용
env:
  PROJECT_NAME: campers
  BUCKET_NAME: campers-cicd
  CODE_DEPLOY_APP: Campers-CodeDeploy
  CODE_DEPLOY_DEPLOYMENT_GROUP: Campers-codedeploy-deployment-group

# 해당 workflow가 언제 실행될 것인지에 대한 트리거를 지정
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: CI/CD
    # 해당 jobs에서 아래의 steps들이 어떠한 환경에서 실행될 것인지 지정
    runs-on: ubuntu-latest

    steps:
      # 작업에서 액세스할 수 있도록 $GITHUB_WORKSPACE에서 저장소를 체크아웃합니다.
      # (2) application.properties 설정
      - uses: actions/checkout@v3
      - run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.properties
      - run: echo ${{ secrets.APPLICATION }}| base64 --decode > ./src/main/resources/application.properties
      - run: cat ./src/main/resources/application.properties

      # Spring 구동을 위한 JDK 11을 세팅합니다.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Make Gradle Wrapper executable
        run: chmod +x gradlew

      # Caching dependencies (디펜던시를 캐싱하여 반복적인 빌드 작업의 시간을 단축)
      # Cache Gradle packages
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

      # Github Action IP
#      - name: Get Github action IP
#        id: ip
#        uses: haythem/public-ip@v1.2
#
#      - name: Setting environment variables
#        run: |
#          echo "AWS_DEFAULT_REGION=ap-northeast-2" >> $GITHUB_ENV
#          echo "AWS_SG_NAME=Web-portfolio" >> $GITHUB_ENV
      
      # AWS 인증서비스
      # github repository에서 Setting에서 사용할 암호화된 변수
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION}}

#      - name: Add Github Actions IP to Security group
#        run: |
#          aws ec2 authorize-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION}}

#      - name: Copy keystore.p12
#        run: |
#          cd ./src/main/resources
#          touch ./keystore.p12
#          echo ${{ secrets.KEYSTORE }}| base64 --decode > ./keystore.p12

      # Build
      - name: Build with Gradle
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          arguments: clean build -x test

      # Build한 후 프로젝트 압축
      - name: Make zip file
        run: zip -r ./$PROJECT_NAME.zip .
        shell: bash

      # Upload to S3 stroage
      - name: Upload to S3
        run: aws s3 cp $PROJECT_NAME.zip s3://$BUCKET_NAME/deploy/$PROJECT_NAME.zip --region ap-northeast-2

      # CodeDeploy에게 배포 명령을 내린다
      - name: Code Deploy
        run: >
         aws deploy create-deployment --application-name $CODE_DEPLOY_APP
         --deployment-config-name CodeDeployDefault.AllAtOnce
         --deployment-group-name $CODE_DEPLOY_DEPLOYMENT_GROUP
         --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=deploy/$PROJECT_NAME.zip

#      - name: Remove Github Actions IP from security group
#        run: |
#          aws ec2 revoke-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION}}
